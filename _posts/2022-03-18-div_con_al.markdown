---
layout: archive
title:  "Divide and Conquer"
date:   2022-03-18 09:41:41 +0900
categories: jekyll update
use_math: true
comments : true
---

# 분할정복  

문제를 나눌 수 없을 때까지 나누어서 각각을 풀면서 다시 합병하여 답을 도출하는 알고리즘

> 설계  

* 분할  
문제가 분할 가능할 경우 ,2개 이상의 문제로 나눔  
* 정복  
나누어진 문제가 분할가능할 경우 다시 divide 수행  
* 병합  
conquer한 문제들을 통합하여 답  

> 예시

<table style="border-collapse: collapse; width: 60%; " border="1" data-ke-align="alignLeft">
<tbody>
<tr style="height: 18px;">
<td style="width: 24.4813%; text-align: center; "><b>정렬 알고리즘</b></td>
<td style="width: 24.8963%; text-align: center; "><b>최대 실행 시간</b></td>
<td style="width: 25.5187%; text-align: center; "><b>최소 실행 시간</b></td>
<td style="width: 24.8963%; text-align: center;"><b>평균 실행 시간</b></td>
</tr>
<tr style="height: 17px;">
<td style="width: 24.4813%;  text-align: center;">선택 정렬</td>
<td style="width: 24.8963%; text-align: center;">O(n^2)</td>
<td style="width: 25.5187%;  text-align: center;">O(n^2)</td>
<td style="width: 24.8963%; text-align: center;">O(n^2)</td>
</tr>
<tr style="height: 17px;">
<td style="width: 24.4813%;  text-align: center;">삽입 정렬</td>
<td style="width: 24.8963%;  text-align: center;">O(n^2)</td>
<td style="width: 25.5187%; text-align: center;">O(n)</td>
<td style="width: 24.8963%; text-align: center;">O(n^2)</td>
</tr>
<tr style="height: 17px;">
<td style="width: 24.4813%;  text-align: center;"><span style="color: #1a5490;">병합 정렬</span></td>
<td style="width: 24.8963%; text-align: center;"><span style="color: #1a5490;">O(nlgn)</span></td>
<td style="width: 25.5187%;text-align: center;"><span style="color: #1a5490;">O(nlgn)</span></td>
<td style="width: 24.8963%;text-align: center;"><span style="color: #1a5490;">O(nlgn)</span></td>
</tr>
<tr style="height: 17px;">
<td style="width: 24.4813%; text-align: center;"><span style="color: #1a5490;">퀵 정렬</span></td>
<td style="width: 24.8963%;text-align: center;"><span style="color: #1a5490;">O(n^2)</span></td>
<td style="width: 25.5187%; text-align: center;"><span style="color: #1a5490;">O(nlgn)</span></td>
<td style="width: 24.8963%;  text-align: center;"><span style="color: #1a5490;">O(nlgn)</span></td>
</tr>
</tbody>
</table>

☛   
> 선택 정렬과 삽입 정렬의 최대 실행시간은 $O(n^2)$   
입력하는 배열의 크기가 크다면 이 알고리즘으로 정렬하는데 매우 오랜 시간이 걸림

 

☛  
> 분할정복 알고리즘을 사용하는 병합 정렬의 실행시간은 모든 경우에 대해 $O(nlogn)$으로 ,  
퀵 정렬은 최대 $O(n^2)$ 이지만  
최선이나 평균의 경우 $O(nlogn)$으로 비교적 빠름   


$ T(n) \leq  
\begin{pmatrix} 
T( \frac {n}{2} )+T( \frac{n}{2} )+n (if, n>1)\\
1 (if,n=1) 
\end{pmatrix} $  

$ T(n) \leq 2T( \frac{n}{2} ) +n  $


$  \leq 2[2T( \frac{n}{4} )+ \frac{n}{2} ]+n $

$ =4T( \frac{n}{4})+2n $ 

$ =8T( \frac{n}{8})+3n $  

$ \leq 2^kT(\frac{n}{2^k})+kn $

$ (2^k=n) ,k=log_2 n $

$ \leq nT(1)+n(log_2 n) $

$ \Rightarrow	T(n) \leq n+nlog_2 n \in O(nlog_2 n) $

![](https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F1jaZt%2Fbtrd1xZC9sT%2FBZy2RklFUqqUhS1AuCJxW1%2Fimg.png)  

---

> <h3 id="h1-2" data-ke-size="size23"><span style="color: #11111;"><b>분할정복 특징 및 장단점</b></span></h3>
<ul style="list-style-type: disc;" data-ke-list-type="disc">
<li>분할된 작은 문제는 원래 문제와 성격이 동일하다&nbsp; -&gt; 입력 크기만 작아짐</li>
<li>분할된 문제는 서로 독립적이다(중복 제거 X) -&gt; 순환적 분할&nbsp; 및 결과 결합 가능&nbsp;</li>
</ul>

<p data-ke-size="size16">&nbsp;</p>
<table style="border-collapse: collapse; width: 91.6465%; " border="1" data-ke-align="alignLeft">
<tbody>
<tr>
<td style="width: 50%;  text-align: center;"><b>장점</b></td>
<td style="width: 50%;  text-align: center;"><b>단점</b></td>
</tr>
<tr style="height: 17px;">
<td style="width: 50%; height: 17px;"><br />∙ Top-down 재귀방식으로 구현하기 때문에 코드가 직관적이다.<br /><br />∙ 문제를 나누어 해결한다는 특징상 병렬적으로 문제를 해결할 수 있다.<br /><br /></td>
<td style="width: 50%; height: 17px;">∙ 재귀 함수 호츨로 오버헤드가 발생할 수 있다.&nbsp;<br /><br />∙&nbsp;스택에 다량의 데이터가 보관되는 경우 오버플로우가 발생할 수 있다.</td>
</tr>
</tbody>
</table>  

---
  

# 퀵정렬  
분할 정복 알고리즘의 하나로, 매우 빠른 수행속도
> 과정 설명  

1. 리스트 안에 있는 한 요소를 선택한다. 이렇게 고른 원소를 피벗(pivot) 이라고 한다.
2. 피벗을 기준으로 피벗보다 작은 요소들은 모두 피벗의 왼쪽으로 옮겨지고 피벗보다 큰 요소들은 모두 피벗의 오른쪽으로 옮겨진다. (피벗을 중심으로 왼쪽: 피벗보다 작은 요소들, 오른쪽: 피벗보다 큰 요소들)
3. 피벗을 제외한 왼쪽 리스트와 오른쪽 리스트를 다시 정렬한다.
- 분할된 부분 리스트에 대하여 순환 호출 을 이용하여 정렬을 반복한다.
- 부분 리스트에서도 다시 피벗을 정하고 피벗을 기준으로 2개의 부분 리스트로 나누는 과정을 반복한다.
4. 부분 리스트들이 더 이상 분할이 불가능할 때까지 반복한다.
리스트의 크기가 0이나 1이 될 때까지 반복한다.
![](https://dudri63.github.io/image/algo6-2.png)

{% if page.comments%}

{%include disqus_comments.html %}
	
{% endif %}  